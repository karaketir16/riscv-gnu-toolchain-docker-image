name: Docker

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs every Sunday
    
  workflow_dispatch:  # Allow manual triggering
  
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: karaketir16/riscv-toolchain-multilib
  TARGET_REPO: riscv-collab/riscv-gnu-toolchain
  TARGET_BRANCH: master

jobs:
  check-and-build:
    timeout-minutes: 720
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps: 
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Maximize build space
        shell: bash
        run: |
            df -h
            sudo chmod +x ./.github/cleanup-rootfs.sh
            sudo ./.github/cleanup-rootfs.sh
            df -h

      - name: Restore commit cache
        uses: actions/cache@v3
        with:
          path: latest_commit.txt
          key: latest-commit-${{ env.TARGET_REPO }}
          restore-keys: latest-commit-

      - name: Get latest commit from target repo
        id: get_latest_commit
        run: |
          LATEST_COMMIT=$(curl -s https://api.github.com/repos/${{ env.TARGET_REPO }}/commits/${{ env.TARGET_BRANCH }} | jq -r '.sha')
          echo "LATEST_COMMIT=${LATEST_COMMIT}" >> $GITHUB_ENV

      - name: Check for commit change
        id: check_commit
        run: |
          if [ -f latest_commit.txt ]; then
            PREV_COMMIT=$(cat latest_commit.txt)
          else
            PREV_COMMIT=""
          fi
          echo "Previous commit: $PREV_COMMIT"
          echo "Latest commit: $LATEST_COMMIT"
          if [ "$LATEST_COMMIT" == "$PREV_COMMIT" ]; then
            echo "No new commit. Exiting..."
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "$LATEST_COMMIT" > latest_commit.txt
          echo "changed=true" >> $GITHUB_OUTPUT

      - name: Commit change detected, proceeding with build
        if: steps.check_commit.outputs.changed == 'true'
        run: echo "New commit detected. Running the build..."

      - name: Set up Docker Buildx
        if: steps.check_commit.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: steps.check_commit.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: steps.check_commit.outputs.changed == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        if: steps.check_commit.outputs.changed == 'true'
        id: build-and-push  # Add an ID to capture outputs
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # not cache cache-from: type=gha
          # not cache cache-to: type=gha,mode=max

      - name: Sign the Docker image
        if: steps.check_commit.outputs.changed == 'true'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          if [ -z "${DIGEST}" ]; then
            echo "Error: DIGEST is empty."
            exit 1
          fi
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Cache the latest commit file
        if: steps.check_commit.outputs.changed == 'true'
        uses: actions/cache@v3
        with:
          path: latest_commit.txt
          key: latest-commit-${{ env.TARGET_REPO }}
